-- ======================================
-- CRIAÇÃO DO BANCO DE DADOS
-- ======================================
CREATE DATABASE IF NOT EXISTS LojaCosmeticos;
USE LojaCosmeticos;

-- ======================================
-- TABELA CLIENTE
-- ======================================
CREATE TABLE Cliente (
    id_cliente INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    telefone VARCHAR(15)
);

-- ======================================
-- TABELA PRODUTO
-- ======================================
CREATE TABLE Produto (
    id_produto INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    preco DECIMAL(10,2) NOT NULL,
    estoque INT NOT NULL,
    categoria ENUM('Maquiagem', 'Skincare', 'Perfume', 'Cabelos', 'Unhas', 'Corpo') NOT NULL
);

-- ======================================
-- TABELA PEDIDO
-- ======================================
CREATE TABLE Pedido (
    id_pedido INT AUTO_INCREMENT PRIMARY KEY,
    id_cliente INT NOT NULL,
    data_pedido DATE NOT NULL,
    status ENUM('Pendente', 'Concluído', 'Cancelado') DEFAULT 'Pendente',
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
);

-- ======================================
-- TABELA ITEM_PEDIDO
-- ======================================
CREATE TABLE ItemPedido (
    id_item INT AUTO_INCREMENT PRIMARY KEY,
    id_pedido INT NOT NULL,
    id_produto INT NOT NULL,
    quantidade INT NOT NULL,
    preco_unitario DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido),
    FOREIGN KEY (id_produto) REFERENCES Produto(id_produto)
);

-- ======================================
-- INSERÇÃO DE DADOS
-- ======================================

-- CLIENTES
INSERT INTO Cliente (nome, email, telefone) VALUES
('Larissa Costa', 'lari@gmail.com', '11999995555'),
('Rafael Lima', 'rafael@gmail.com', '11988884444'),
('Juliana Souza', 'ju.souza@gmail.com', '11977773333');
select*from Cliente;
-- PRODUTOS
INSERT INTO Produto (nome, descricao, preco, estoque, categoria) VALUES
('Base Líquida Matte', 'Base de alta cobertura, ideal para pele oleosa', 39.90, 100, 'Maquiagem'),
('Hidratante Facial', 'Com ácido hialurônico para todos os tipos de pele', 29.90, 80, 'Skincare'),
('Perfume Floratta', 'Fragrância suave e floral', 89.90, 50, 'Perfume'),
('Shampoo Nutritivo', 'Para cabelos ressecados com óleo de argan', 22.50, 120, 'Cabelos'),
('Esmalte Vermelho', 'Secagem rápida e longa duração', 5.90, 200, 'Unhas');
select*from Produto;
-- PEDIDOS
INSERT INTO Pedido (id_cliente, data_pedido, status) VALUES
(1, '2025-08-01', 'Concluído'),
(2, '2025-08-03', 'Pendente'),
(3, '2025-08-04', 'Cancelado');

-- ITENS DO PEDIDO
INSERT INTO ItemPedido (id_pedido, id_produto, quantidade, preco_unitario) VALUES
(1, 1, 1, 39.90),
(1, 3, 1, 89.90),
(2, 2, 2, 29.90),
(3, 5, 3, 5.90);

-- ======================================
-- CONSULTAS DO SISTEMA
-- ======================================

-- 1. Listar todos os clientes ordenados por nome
SELECT * FROM Cliente ORDER BY nome ASC;

-- 2. Buscar produtos que contenham 'Base'
SELECT * FROM Produto WHERE nome LIKE '%Base%';

-- 3. Pedidos concluídos com nome do cliente e total
SELECT p.id_pedido, c.nome AS cliente, 
       SUM(ip.quantidade * ip.preco_unitario) AS total
FROM Pedido p
JOIN Cliente c ON p.id_cliente = c.id_cliente
JOIN ItemPedido ip ON p.id_pedido = ip.id_pedido
WHERE p.status = 'Concluído'
GROUP BY p.id_pedido, c.nome;

-- 4. Top 3 produtos mais caros
SELECT nome, preco FROM Produto ORDER BY preco DESC LIMIT 3;

-- 5. Quantidade de pedidos por cliente
SELECT c.nome, COUNT(p.id_pedido) AS total_pedidos
FROM Cliente c
LEFT JOIN Pedido p ON c.id_cliente = p.id_cliente
GROUP BY c.nome;

-- 6. Produtos com estoque abaixo de 50
SELECT nome, estoque FROM Produto WHERE estoque < 50;

-- 7. Pedidos pendentes
SELECT p.id_pedido, c.nome, p.data_pedido
FROM Pedido p
JOIN Cliente c ON p.id_cliente = c.id_cliente
WHERE p.status = 'Pendente';

-- 8. Média de preço por categoria
SELECT categoria, AVG(preco) AS media_preco
FROM Produto
GROUP BY categoria;

-- 9. Pedidos cancelados com valor total
SELECT p.id_pedido, c.nome, SUM(ip.quantidade * ip.preco_unitario) AS total
FROM Pedido p
JOIN Cliente c ON p.id_cliente = c.id_cliente
JOIN ItemPedido ip ON p.id_pedido = ip.id_pedido
WHERE p.status = 'Cancelado'
GROUP BY p.id_pedido, c.nome;

-- 10. Clientes sem pedidos
SELECT c.nome
FROM Cliente c
LEFT JOIN Pedido p ON c.id_cliente = p.id_cliente
WHERE p.id_pedido IS NULL;
